#!/usr/bin/env python
"""This module brings together and exports target/disease evidence generated by AzGeneBurden.py and RegeneronGeneBurdeb.py."""

import argparse
from functools import partial, reduce
import logging
import sys

from pyspark import SparkFiles
from pyspark.sql import SparkSession
from pyspark.sql.dataframe import DataFrame
import pyspark.sql.functions as F
import pyspark.sql.types as T

from common.evidence import initialize_sparksession, write_evidence_strings
from AzGeneBurden import main as process_az_gene_burden
from GenebassGeneBurden import main as process_genebass_gene_burden


def main(
    az_binary_data: str,
    az_quant_data: str,
    curated_data: str,
    genebass_data: str,
) -> DataFrame:
    """This module brings together and exports target/disease evidence generated by AzGeneBurden.py and RegeneronGeneBurdeb.py."""

    burden_evidence_sets = [
        # Generate evidence from AZ data:
        process_az_gene_burden(az_binary_data, az_quant_data).persist(),
        # Generate evidence from manual data:
        process_gene_burden_curation(curated_data).persist(),
        # Generate evidence from GeneBass data:
        process_genebass_gene_burden(genebass_data).persist(),
    ]

    unionByDiffSchema = partial(DataFrame.unionByName, allowMissingColumns=True)
    evd_df = reduce(unionByDiffSchema, burden_evidence_sets).distinct()
    logging.info(f'Total number of gene_burden evidence: {evd_df.count()}')

    return evd_df


def process_gene_burden_curation(curated_data: str) -> DataFrame:
    """Process manual gene burden evidence."""

    logging.info(f'File with the curated burden associations: {curated_data}')
    manual_df = read_gene_burden_curation(curated_data)
    logging.info(f'Total number of imported manual gene_burden evidence: {manual_df.count()}')

    manual_df = (
        manual_df
        # The columns practically follow the schema, only small things need to be parsed
        # 1. Confidence intervals are detached
        .withColumn(
            'oddsRatioConfidenceIntervalLower', F.when(F.col('oddsRatio').isNotNull(), F.col('ConfidenceIntervalLower'))
        )
        .withColumn(
            'oddsRatioConfidenceIntervalUpper', F.when(F.col('oddsRatio').isNotNull(), F.col('ConfidenceIntervalUpper'))
        )
        .withColumn('betaConfidenceIntervalLower', F.when(F.col('beta').isNotNull(), F.col('ConfidenceIntervalLower')))
        .withColumn('betaConfidenceIntervalUpper', F.when(F.col('beta').isNotNull(), F.col('ConfidenceIntervalUpper')))
        .drop('ConfidenceIntervalLower', 'ConfidenceIntervalUpper')
        # 2. Collect PMID and allelic requirements in an array
        .withColumn('literature', F.array(F.col('literature')))
        .withColumn(
            'allelicRequirements',
            F.when(F.col('allelicRequirements').isNotNull(), F.array(F.col('allelicRequirements'))),
        )
        # 3. Split the sex column to form an array
        .withColumn('sex', F.split(F.col('sex'), ', '))
        # 4. Add hardcoded values and drop URLs (will be handled by the FE) and HGNC symbols
        .withColumn('datasourceId', F.lit('gene_burden'))
        .withColumn('datatypeId', F.lit('genetic_association'))
        .drop('url', 'targetFromSource')
        .distinct()
    )

    return manual_df


def read_gene_burden_curation(curated_data: str) -> DataFrame:
    """Read manual gene burden curation from remote to a Spark DataFrame."""

    schema = T.StructType(
        [
            T.StructField('projectId', T.StringType(), True),
            T.StructField('targetFromSource', T.StringType(), True),
            T.StructField('targetFromSourceId', T.StringType(), True),
            T.StructField('diseaseFromSource', T.StringType(), True),
            T.StructField('diseaseFromSourceMappedId', T.StringType(), True),
            T.StructField('resourceScore', T.DoubleType(), True),
            T.StructField('pValueMantissa', T.DoubleType(), True),
            T.StructField('pValueExponent', T.IntegerType(), True),
            T.StructField('oddsRatio', T.DoubleType(), True),
            T.StructField('ConfidenceIntervalLower', T.DoubleType(), True),
            T.StructField('ConfidenceIntervalUpper', T.DoubleType(), True),
            T.StructField('beta', T.DoubleType(), True),
            T.StructField('sex', T.StringType(), True),
            T.StructField('ancestry', T.StringType(), True),
            T.StructField('ancestryId', T.StringType(), True),
            T.StructField('cohortId', T.StringType(), True),
            T.StructField('studySampleSize', T.IntegerType(), True),
            T.StructField('studyCases', T.IntegerType(), True),
            T.StructField('studyCasesWithQualifyingVariants', T.IntegerType(), True),
            T.StructField('allelicRequirements', T.StringType(), True),
            T.StructField('studyId', T.StringType(), True),
            T.StructField('statisticalMethod', T.StringType(), True),
            T.StructField('statisticalMethodOverview', T.StringType(), True),
            T.StructField('literature', T.StringType(), True),
            T.StructField('url', T.StringType(), True),
        ]
    )

    spark.sparkContext.addFile(curated_data)

    return SparkSession.getActiveSession().read.csv(
        SparkFiles.get(curated_data.split('/')[-1]), sep='\t', header=True, schema=schema
    )


def get_parser():
    """Get parser object for script GeneBurden.py."""
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument(
        '--az_binary_data',
        help='Input parquet files with AZ\'s PheWAS associations of binary traits.',
        type=str,
        required=True,
    )
    parser.add_argument(
        '--az_quant_data',
        help='Input parquet files with AZ\'s PheWAS associations of quantitative traits.',
        type=str,
        required=True,
    )
    parser.add_argument(
        '--curated_data',
        help='Input remote CSV file containing the gene burden manual curation.',
        type=str,
        required=True,
    )
    parser.add_argument(
        '--genebass_data',
        help='Input parquet files with Genebass\'s burden associations.',
        type=str,
        required=True,
    )
    parser.add_argument(
        '--output',
        help='Output gzipped json file following the gene_burden evidence data model.',
        type=str,
        required=True,
    )
    parser.add_argument(
        '--log_file',
        help='Destination of the logs generated by this script. Defaults to None',
        type=str,
        nargs='?',
        default=None,
    )

    return parser


if __name__ == "__main__":
    args = get_parser().parse_args()

    # Logger initializer. If no log_file is specified, logs are written to stderr
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s %(levelname)s %(module)s - %(funcName)s: %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S',
    )
    if args.log_file:
        logging.config.fileConfig(filename=args.log_file)
    else:
        logging.StreamHandler(sys.stderr)

    spark = initialize_sparksession()

    evd_df = main(
        az_binary_data=args.az_binary_data,
        az_quant_data=args.az_quant_data,
        curated_data=args.curated_data,
        genebass_data=args.genebass_data,
    )

    write_evidence_strings(evd_df, args.output)
    logging.info(f'Evidence strings have been saved to {args.output}. Exiting.')
